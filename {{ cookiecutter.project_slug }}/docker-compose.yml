services:
  {%- if cookiecutter.sample_project %}
  api:
    build:
      context: projects/api
      dockerfile: Dockerfile
    env_file:
      - docker.env
    ports:
      - "8000:8000"
    command: python run.py
  {%- endif %}

  {%- if cookiecutter.docker_compose_postgres %}
  postgres:
    image: postgres:14.7-alpine
    restart: on-failure
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "5432:5432"
    depends_on:
      - pgadmin
  
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres@me.me
      PGADMIN_DEFAULT_PASSWORD: postgres
      GUNICORN_ACCESS_LOGFILE: /dev/null
    ports:
      - 5050:80
    volumes:
      - ./.docker/pgadmin/servers.json:/pgadmin4/servers.json
  {%- endif %}

  {%- if cookiecutter.docker_compose_redis %}
  redis:
    image: redis:7.2-alpine
    restart: on-failure
    command: >
      --requirepass password
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a password ping | grep PONG" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"
  {%- endif %}

  {%- if cookiecutter.docker_compose_minio %}
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: access_key
      MINIO_ROOT_PASSWORD: secret_key
      MINIO_ADDRESS: :9000
      MINIO_CONSOLE_ADDRESS: :9001
    entrypoint: minio server /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9001/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - "9000:9000"
      - "9001:9001"

  minio-create-buckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/bash -c "
      /usr/bin/mc alias set myminio http://minio:9000 access_key secret_key;
      /usr/bin/mc mb myminio/public;
      exit 0;
      "
  {%- endif %}

  {%- if cookiecutter.docker_compose_rabbitmq %}
  rabbitmq:
    restart: on-failure
    image: rabbitmq:4.0.3-management-alpine
    logging:
      driver: none
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 20s
      retries: 5
    ports:
      - "5672:5672"
      - "15672:15672"
  {%- endif %}

  {%- if cookiecutter.docker_compose_kafka %}
  kafka:
    image: bitnami/kafka:3.9.0
    restart: on-failure
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka:9093"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9094,CONTROLLER://:9093,EXTERNAL://:9092"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://:9094,EXTERNAL://localhost:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 60
    ports:
      - "9092:9092"
  {%- endif %}
